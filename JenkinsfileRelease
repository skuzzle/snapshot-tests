pipeline {
  agent {
    docker {
      // Need an image with git installed that is why we stick with maven image for now though we're using gradle
      image 'maven:3.6-jdk-11'
      args '-v /home/jenkins/.gradle:/var/gradle/.gradle -v /home/jenkins/.gnupg:/.gnupg -e GRADLE_OPTS=-Duser.home=/var/gradle'
    }
  }
  environment {
    GITHUB = credentials('Github-Username-Pw')
    GITHUB_RELEASE_TOKEN = credentials('github_registry_release')
    GIT_ASKPASS='./.git-askpass'
    COVERALLS_REPO_TOKEN = credentials('coveralls_repo_token_snapshot_tests')
    ORG_GRADLE_PROJECT_sonatype = credentials('SONATYPE_NEXUS')
    ORG_GRADLE_PROJECT_signingPassword = credentials('gpg_password')
    ORG_GRADLE_PROJECT_base64EncodedAsciiArmoredSigningKey  = credentials('gpg_private_key')
  }
  stages {
    stage ('Ensure dev branch') {
      when {
        expression {
            return env.BRANCH_NAME != 'dev';
        }
      }
      steps {
        error("Releasing is only possible from dev branch")
      }
    }
    stage ('Set Git Information') {
      steps {
        sh 'echo \'echo \$GITHUB_PSW\' > ./.git-askpass'
        sh 'chmod +x ./.git-askpass'
        sh 'git config url."https://api@github.com/".insteadOf "https://github.com/"'
        sh 'git config url."https://ssh@github.com/".insteadOf "ssh://git@github.com/"'
        sh 'git config url."https://git@github.com/".insteadOf "git@github.com:"'
        sh 'git config user.email "build@taddiken.online"'
        sh 'git config user.name "Jenkins"'
      }
    }
    stage('Build Release') {
      steps {
        sh './gradlew build sign'
      }
    }
    stage('Perform release') {
      steps {
        sh './gradlew release'
      }
    }
    stage('Create GitHub release') {
      steps {
        sh 'git checkout main'
        sh './gradlew githubRelease -Pgh_token=${GITHUB_RELEASE_TOKEN}'
      }
    }
  }
}
