pipeline {
    agent none
    stages {
        stage('JDK-17') {
            agent {
                docker {
                    image 'maven:3.8.7-eclipse-temurin-17'
                    args '-v /home/jenkins/.m2:/var/maven/.m2 -v /home/jenkins/.gnupg:/.gnupg -e MAVEN_CONFIG=/var/maven/.m2 -e MAVEN_OPTS=-Duser.home=/var/maven'
                }
            }
            steps {
                testAgainstJdk("17")
            }
        }
        stage('JDK-19') {
            agent {
                docker {
                    image 'maven:3.8.7-eclipse-temurin-19'
                    args '-v /home/jenkins/.m2:/var/maven/.m2 -v /home/jenkins/.gnupg:/.gnupg -e MAVEN_CONFIG=/var/maven/.m2 -e MAVEN_OPTS=-Duser.home=/var/maven'
                }
            }
            steps {
                testAgainstJdk("19")
            }
        }
    }
}

void testAgainstJdk(version) {
    stage("Show Versions") {
        script {
            sh 'mvn -version'
            sh 'java -version'
            sh 'javac -version'
        }
    }

    stage("Clean Maven Project") {
        script {
            sh 'mvn clean -Dmaven.clean.failOnError=false -Dmaven.clean.retryOnError=true'
        }
    }

    stage("Test against JDK $version") {
        script {
            try {
                sh "mvn verify -Dmaven.compiler.release=$version"
            } catch (err) {
                currentBuild.result = 'FAILURE'
            }
        }
    }
    
    stage("Build JavaDoc against JDK $version") {
        script {
            try {
                sh "mvn javadoc:javadoc -Dmaven.compiler.release=$version"
            } catch (err) {
                currentBuild.result = 'FAILURE'
            }
        }
    }
}
